# Lists and Tuples Unit Test
# 1/6/2023 @ 10:31 am

# Helper Functions
import operator as op
import traceback

eq_comp = op.__eq__
is_comp = op.is_

def elems_comp(a_list, b_list):
    # Return true if every element of a is an element of b and vice versa, False otherwise
    if not isinstance(a_list, list) or not isinstance(b_list, list):
        return False
    for elem in a_list:
        if elem not in b_list:
            return False
    for elem in b_list:
        if elem not in b_list:
            return False
    return True

def order_comp(a_list, b_list):
    for i in range(len(a_list)):
        try:
            if a_list[i] != b_list[i]:
                return False
        except:
            return False
    return True

def eq_not_is(an_obj, another_obj):
    return (an_obj == another_obj) and not(an_obj is another_obj)

def approx_eq(expected, actual):
    if isinstance(expected, (int, float, complex)):
        if not isinstance(actual, (int, float, complex)):
            return False
        return abs(expected - actual) < 0.000001
    return False

def build_arg_str(args, is_poly):
    arg_str = ""
    if is_poly:
        for arg in args:
            if callable(arg):
                arg_str = arg_str + arg.__name__ + " "
            else:
                if isinstance(arg, str):
                    arg_str = arg_str + "'" + arg + "'" + " "
                else:
                    arg_str = arg_str + str(arg) + " "
    else:
        if callable(args):
            arg_str = args.__name__
        else:
            if isinstance(args, str):
                arg_str = "'" + args + "'"
            else:
                arg_str = str(args)
    return arg_str.strip()

class Unit():

    def __init__(self, func, name, cases, is_polyadic, is_mutator, test_type):
        # If the function is polyadic, we need to * the input so that it unpacks.
        # If the function is a mutator, we don't ask for its return value.
        # Instead we compare the input after the function is called to the correct mutated value.
        # Six test types are required:
        # 1. Verify equality of value: eq_comp
        # 2. Verify identity: is_comp
        # 3. Verify equality of value and non-identity: eq_not_is
        # 4. Verify that two lists have the same elements, order irrelevant: elems_comp
        # 5. Verify that two lists have same elements in same order: order_comp
        # 6. Verify that two floats are close enough: approx_eq
        self.func = func
        self.name = name
        self.cases = cases
        self.is_polyadic = is_polyadic
        self.is_mutator = is_mutator
        self.test_type = test_type
        self.score = 0

    def add_test(self, new_test):
        self.cases.append(new_test)

class UnitTest():

    def __init__(self, name, units):
        self.name = name
        self.units = units
        self.score = 0
        self.num_tests = 0

    def run_test(self):
        test_file = open("report.txt", "w")
        test_file.write(self.name + "\n")
        total_score = 0
        pts_lost_dict = {}
        for unit in self.units:
            pts_lost_dict[unit.name] = 0
            test_file.write("\nFunction: \"" + unit.name + "\"\n")
            for case in unit.cases:
                self.num_tests += 1
                arg = case[0]
                expected_value = case[1]
                arg_str = build_arg_str(arg, unit.is_polyadic)
                test_file.write("Argument(s): " + arg_str + "  ")
                # Now flush the contents of the write buffer so that if a function hangs,
                # the report will show precisely where it happened.
                test_file.flush()
                try:
                    if unit.is_polyadic:
                        actual_value = unit.func(*arg)
                    else:
                        actual_value = unit.func(arg) 
                except Exception as err:
                    # Do not print error if function hasn't been implemented (no arguments defined but passing args error).
					# This avoids giving students a wall of errors when starting project.
                    if "takes 0 positional arguments but" not in str(err):
                        # Print error to console
                        traceback.print_exc()
                    test_file.write("Crash! No points!\n")
                    pts_lost_dict[unit.name] += 1
                else:
                    if not unit.is_mutator:
                        if unit.test_type(expected_value, actual_value):
                            test_file.write("  Return value correct! +1\n")
                            unit.score += 1
                        else:
                            test_file.write("  Incorrect return value! No point!\n")
                            pts_lost_dict[unit.name] += 1
                    else:
                        if unit.is_polyadic:
                            mutated_value = arg[0]
                        else:
                            mutated_value = arg
                        if unit.test_type(expected_value, mutated_value):
                            test_file.write("  Mutated value correct! +1\n")
                            unit.score += 1
                        else:
                            test_file.write("  Incorrect mutated value! No point!\n")
                            pts_lost_dict[unit.name] += 1

            total_score += unit.score

        self.score = total_score
        test_file.write("\nSummary:")
        if self.score < self.num_tests:
            for name in pts_lost_dict:
                pts_lost = pts_lost_dict[name]
                if pts_lost > 0:
                    test_file.write("\nFunction \"" + name + "\", points lost " + str(pts_lost) + ".")
        else:
            test_file.write(" Perfection!")
        summary = "Final Score: " + str(self.score) + "/" + str(self.num_tests)
        test_file.write("\n\n" + summary)
        print(summary)

# Test Cases (tc)
# Format: a list of tuples where each tuple
# gives an argument (or tuple of arguments)
# and the expected return for that argument.
max_num_tc = [([58, 11, 26, 46, 46, 70, 74, 58, 74, -67, 10, 28, 27, 41, -30, 89, -34, -20, -85, -17, -54, -93, 2, 30], 89),
              ([0, 10**99, -1*(10**99)], 10**99),
              ([-1], -1)]
min_num_tc = [([58, 11, 26, 46, 46, 70, 74, 58, 74, -67, 10, 28, 27, 41, -30, 89, -34, -20, -85, -17, -54, -93, 2, 30], -93),
              ([0, 10**99, -1*(10**99)], -1*(10**99)),
              ([-1], -1)]
sum_elems_tc = [([-190, -549, -923, 504, -800, 437, -434, -732, 20, -148, -704, 151, -822, -805, 128, -337, -236, 131, 829, -897, 464, 862, 912, 537, -764, 63, -277, -744, -884, -532, -894, 410, -63, 607, 316, -931, -32, 535, -184, 558, 345, -758, 106, 78, 776, 992, 730, 998], -2151),
                ([-1], -1),
                ([], 0)]
greatest_sum_tc = [([[1], [2, 3, 4], [5, 6], [7]], 11),
                   ([[]], 0),
                   ([], 0)]
dot_product_tc = [(([1, 2, 3], [4, 5, 6]), 32),
                  ([[12], [12]], 144),
                  ([[], []], 0)]
mean_tc = [([1, 2, 3, 4, 5], 3),
           ([0], 0)]
mode_tc = [([1, 2, 2, 3, 3, 3, 2, 1], [2, 3]),
           ([1], [1]),
           ([], [])]
perimeter_tc = [(((1, 2), (1, 12), (-2, 0), (-12, 0)), 45.522263314818886),
                (((1, 1), ), 0),
                ((), 0)]
prime_list_tc = [((1, 100), [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])]
prime_factorization_tc = [(24, [2, 2, 2, 3]),
                          (1111149, [3, 3, 13, 9497]),
                          (23, [23])]
flatten_tc = [([[1, 2], [2, 3, 4], [4]], [1, 2, 2, 3, 4, 4]),
              ([[]], []),
              ([], [])]
L, I = [1, 2, 3], [1]
move_tc = [((L, 1, 2), [1, 3, 2]),
           ((I, 0, 0), [1])]
L, I = [1, 2, 3, 4], [1]
exchange_tc = [((L, 1, 2), [1, 3, 2, 4]),
               ((I, 0, 0), [1])]
elim_dups_tc = [([3, 2, 1, 2, 1, 4, 3], [3, 2, 1, 4]),
                ([3, 2, 1], [3, 2, 1]),
                ([], [])]
longest_monotonic_tc = [([8, 7, 0, 9, 8, 11, 11, 12, 3, 6, 2, 9, 4, 8, 12, 3, 6, 8, 5, 12, 5, 3, 12, 12, 5, 3, 5, 11, 3, 4, 11, 10, 11, 6, 6, 12], [[8, 11, 11, 12], [12, 12, 5, 3]]),
                        ([1], []),
                        ([], [])]
L = [24, 54, 39, 71, 42, 13, 9, 72, 19, 52, 95, 68, 88, 96, 61, 64, 69, 93, 83, 52, 53, 32, 1, 16, 97, 28, 61, 78, 30, 86, 11, 1, 22, 20, 8, 98, 6, 82, 91, 70, 31, 31, 40, 89, 41, 18, 18, 8, 87, 3, 45, 39, 72, 15, 19, 82, 97, 7, 12, 91, 9, 59, 44, 91, 37, 92, 90, 47, 31, 34, 2, 79, 19, 77, 30, 50, 32, 77, 5, 50, 4, 3, 98, 73, 44, 43, 21, 47, 70, 14, 100, 35, 23, 27, 40, 4, 47, 41, 93, 15]
I = [1, 1, 2, 3, 3, 4, 4, 5, 6, 7, 8, 8, 9, 9, 11, 12, 13, 14, 15, 15, 16, 18, 18, 19, 19, 19, 20, 21, 22, 23, 24, 27, 28, 30, 30, 31, 31, 31, 32, 32, 34, 35, 37, 39, 39, 40, 40, 41, 41, 42, 43, 44, 44, 45, 47, 47, 47, 50, 50, 52, 52, 53, 54, 59, 61, 61, 64, 68, 69, 70, 70, 71, 72, 72, 73, 77, 77, 78, 79, 82, 82, 83, 86, 87, 88, 89, 90, 91, 91, 91, 92, 93, 93, 95, 96, 97, 97, 98, 98, 100]
S = []
bubble_sort_tc = [(L, I), (S, S)]
L = [24, 54, 39, 71, 42, 13, 9, 72, 19, 52, 95, 68, 88, 96, 61, 64, 69, 93, 83, 52, 53, 32, 1, 16, 97, 28, 61, 78, 30, 86, 11, 1, 22, 20, 8, 98, 6, 82, 91, 70, 31, 31, 40, 89, 41, 18, 18, 8, 87, 3, 45, 39, 72, 15, 19, 82, 97, 7, 12, 91, 9, 59, 44, 91, 37, 92, 90, 47, 31, 34, 2, 79, 19, 77, 30, 50, 32, 77, 5, 50, 4, 3, 98, 73, 44, 43, 21, 47, 70, 14, 100, 35, 23, 27, 40, 4, 47, 41, 93, 15]
I = [1, 1, 2, 3, 3, 4, 4, 5, 6, 7, 8, 8, 9, 9, 11, 12, 13, 14, 15, 15, 16, 18, 18, 19, 19, 19, 20, 21, 22, 23, 24, 27, 28, 30, 30, 31, 31, 31, 32, 32, 34, 35, 37, 39, 39, 40, 40, 41, 41, 42, 43, 44, 44, 45, 47, 47, 47, 50, 50, 52, 52, 53, 54, 59, 61, 61, 64, 68, 69, 70, 70, 71, 72, 72, 73, 77, 77, 78, 79, 82, 82, 83, 86, 87, 88, 89, 90, 91, 91, 91, 92, 93, 93, 95, 96, 97, 97, 98, 98, 100]
selection_sort_tc = [(L, I), (S, S)]
L = [24, 54, 39, 71, 42, 13, 9, 72, 19, 52, 95, 68, 88, 96, 61, 64, 69, 93, 83, 52, 53, 32, 1, 16, 97, 28, 61, 78, 30, 86, 11, 1, 22, 20, 8, 98, 6, 82, 91, 70, 31, 31, 40, 89, 41, 18, 18, 8, 87, 3, 45, 39, 72, 15, 19, 82, 97, 7, 12, 91, 9, 59, 44, 91, 37, 92, 90, 47, 31, 34, 2, 79, 19, 77, 30, 50, 32, 77, 5, 50, 4, 3, 98, 73, 44, 43, 21, 47, 70, 14, 100, 35, 23, 27, 40, 4, 47, 41, 93, 15]
I = [1]
S = [1, 2]
T = [1, 2, 3]
median_tc = [(L, 42.5), (I, 1), (S, 1.5), (T, 2)]
mat_size_tc = [([[74, 26, 15, -80, 47], [-27, -52, 59, -29, 21], [-44, -86, 73, 5, -5]], (3, 5)), ([[]], (0, 0))]
mat_add_tc = [(([[-92, -58, 12], [16, 58, 8], [90, 36, -59], [91, -70, 57]], [[-49, -33, -86], [27, 94, -88], [43, 60, 19], [-99, 26, 37]]), [[-141, -91, -74], [43, 152, -80], [133, 96, -40], [-8, -44, 94]])]
scalar_mult_tc = [((-3, [[1, 10, 5], [-9, -3, -2], [-3, 3, -4], [-11, 12, 6]]), [[-3, -30, -15], [27, 9, 6], [9, -9, 12], [33, -36, -18]])]
mat_sub_tc = [(([[-92, -58, 12], [16, 58, 8], [90, 36, -59], [91, -70, 57]], [[-49, -33, -86], [27, 94, -88], [43, 60, 19], [-99, 26, 37]]), [[-43, -25, 98], [-11, -36, 96], [47, -24, -78], [190, -96, 20]])]
mat_mult_tc = [(([[4, 8, -2], [-3, -5, 3], [-7, 3, 2], [9, 2, -4]], [[12, -9, 3, -2], [8, 2, -10, 7], [-3, 5, 9, 9]]), [[118, -30, -86, 30], [-85, 32, 68, -2], [-66, 79, -33, 53], [136, -97, -29, -40]])]
transpose_tc = [([[-7, 2, 11, 3, 11], [9, 8, -1, -7, 3], [-8, -8, 9, 4, 10], [-11, 5, 3, -3, 5]], [[-7, 9, -8, -11], [2, 8, -8, 5], [11, -1, 9, 3], [3, -7, 4, -3], [11, 3, 10, 5]])]

# Create Units
# This block will cause a crash if you haven't created all of the required functions.
# Format: Unit(func, name, cases, is_polyadic, is_mutator, test_type)
# Test types: eq_comp, is_comp, eq_not_is, elems_comp
max_num_unit = Unit(max_num, "max_num", max_num_tc, False, False, eq_comp)
min_num_unit = Unit(min_num, "min_num", min_num_tc, False, False, eq_comp)
sum_elems_unit = Unit(sum_elems, "sum_elems", sum_elems_tc, False, False, eq_comp)
greatest_sum_unit = Unit(greatest_sum, "greatest_sum", greatest_sum_tc, False, False, eq_comp)
dot_product_unit = Unit(dot_product, "dot_product", dot_product_tc, True, False, eq_comp)
mean_unit = Unit(mean, "mean", mean_tc, False, False, eq_comp)
mode_unit = Unit(mode, "mode", mode_tc, False, False, eq_comp)
perimeter_unit = Unit(perimeter, "perimeter", perimeter_tc, False, False, approx_eq)
prime_list_unit = Unit(prime_list, "prime_list", prime_list_tc, True, False, eq_comp)
prime_factorization_unit = Unit(prime_factorization, "prime_factorization", prime_factorization_tc, False, False, eq_comp)
flatten_unit = Unit(flatten, "flatten", flatten_tc, False, False, eq_comp)
move_unit = Unit(move, "move", move_tc, True, True, eq_comp)
exchange_unit = Unit(exchange, "exchange", exchange_tc, True, True, eq_comp)
elim_dups_unit = Unit(elim_dups, "elim_dups", elim_dups_tc, False, True, eq_comp)
longest_monotonic_unit = Unit(longest_monotonic, "longest monotonic subsequences", longest_monotonic_tc, False, False, eq_comp)
bubble_sort_unit = Unit(bubble_sort, "bubble_sort", bubble_sort_tc, False, True, eq_comp)
selection_sort_unit = Unit(selection_sort, "selection_sort", selection_sort_tc, False, True, eq_comp)
median_unit = Unit(median, "median", median_tc, False, False, eq_comp)
mat_size_unit = Unit(mat_size, "matrix size", mat_size_tc, False, False, eq_comp)
mat_add_unit = Unit(mat_add, "matrix addition", mat_add_tc, True, False, eq_comp)
scalar_mult_unit = Unit(scalar_mult, "scalar multiplication", scalar_mult_tc, True, False, eq_comp)
mat_sub_unit = Unit(mat_sub, "matrix subtraction", mat_sub_tc, True, False, eq_comp)
mat_mult_unit = Unit(mat_mult, "matrix multiplication", mat_mult_tc, True, False, eq_comp)
transpose_unit = Unit(transpose, "transpose", transpose_tc, False, False, eq_comp)

# Unit Test List
units = [max_num_unit, min_num_unit, sum_elems_unit, greatest_sum_unit, dot_product_unit, mean_unit,
         mode_unit, perimeter_unit, prime_list_unit, prime_factorization_unit, flatten_unit, move_unit,
         exchange_unit, elim_dups_unit, longest_monotonic_unit, bubble_sort_unit, selection_sort_unit, median_unit,
         mat_size_unit, mat_add_unit, scalar_mult_unit, mat_sub_unit, mat_mult_unit, transpose_unit]

# Create Unit Test
unit_test = UnitTest("Lists and Tuples Unit Test", units)

# Run Test!
unit_test.run_test()
